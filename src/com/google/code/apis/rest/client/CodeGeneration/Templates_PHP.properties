# abstract rest request super class
restRequestClass = \n// class auto-generated by REST Compile \n\
abstract class RestRequest &#123; \n\
\n\
\t// provide user and password for HTTP AUTH \n\
\tprivate $_user = &apos;&apos;;\n\
\tprivate $_password = &apos;&apos;;\n\
\n\
\t// constructor \n\
\tpublic function __construct() &#123; \n\
\n\
\t&#125; \n\
\n\
\t// the POST function \n\
\tpublic function doPostCall($request, $postArgs) &#123; \n\
\n\
\t\t// initialize the session \n\
\t\t$ch = curl_init($request); \n\
\n\
\t\t// set curl options \n\
\t\tcurl_setopt ($ch, CURLOPT_POST, true); \n\
\t\tcurl_setopt ($ch, CURLOPT_POSTFIELDS, $postArgs); \n\
\t\tcurl_setopt($ch, CURLOPT_HEADER, true); \n\
\t\tcurl_setopt($ch, CURLOPT_RETURNTRANSFER, true); \n\
\t\t// provide credentials if they&apos;re established \n\
\t\tif(!empty($this-&gt;_user) && !empty($this-&gt;_password)) &#123; \n\
\t\t\tcurl_setopt($ch, CURLOPT_USERPWD, $this-&gt;_user . &apos;:&apos; . $this-&gt;_password); \n\
\t\t&#125;\n\
\n\
\t\t// do the POST and then close the session \n\
\t\t$response = curl_exec($ch); \n\
\t\t$header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE); \n\
\t\t$headers = substr($response, 0, $header_size - 4); \n\
\t\t$body = substr($response, $header_size); \n\
\t\tcurl_close($ch); \n\
\n\
\t\treturn $this-&gt;checkResponse($headers, $body); \n\
\n\
\t&#125; \n\
\n\
\t// the GET function \n\
\tpublic function doGetCall($request) &#123; \n\
\n\
\t\t// initialize the session \n\
\t\t$ch = curl_init($request); \n\
\n\
\t\t// set curl options \n\
\t\tcurl_setopt($ch, CURLOPT_HEADER, true); \n\
\t\tcurl_setopt($ch, CURLOPT_RETURNTRANSFER, true); \n\
\t\t// provide credentials if they&apos;re established \n\
\t\tif(!empty($this-&gt;_user) && !empty($this-&gt;_password)) &#123; \n\
\t\t\tcurl_setopt($ch, CURLOPT_USERPWD, $this-&gt;_user . &apos;:&apos; . $this-&gt;_password); \n\
\t\t&#125;\n\
\n\
\t\t// do the GET and then close the session \n\
\t\t$response = curl_exec($ch); \n\
\t\t$header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE); \n\
\t\t$headers = substr($response, 0, $header_size - 4); \n\
\t\t$body = substr($response, $header_size); \n\
\t\tcurl_close($ch); \n\
\n\
\t\treturn $this-&gt;checkResponse($headers, $body); \n\
\n\
\t&#125; \n\
\n\
\t// checks the status code of the response \n\
\tprivate function checkResponse($headers, $body) &#123; \n\
\n\
\t\t$status_code = array(); \n\
\t\tpreg_match(&apos;/\\\d\\\d\\\d/&apos;, $headers, $status_code); \n\
\t\tswitch($status_code[0]) &#123; \n\
\t\t\tcase 200: \n\
\t\t\t\t\tbreak; //success \n\
{0} \
\t\t&#125; \n\
\n\
\t\treturn $body; \n\
\n\
\t&#125; \n\
\n\
&#125; \n

# define a class
defClass = \n// class auto-generated by REST Compile \n\
class {0} extends RestRequest &#123; \n\
\n\
\t// class variables \n\
{1} \n\
\n\
\t// constructor \n\
\tpublic function __construct({2}) &#123; \n\
\n\
\t\t// assign class variables \n\
{3} \n\
\t&#125; \n\
\n\
\t// prepares the POST or GET parameters \n\
\tprivate function prepareParams() &#123; \n\
\n\
\t\t$paramString = &apos;&apos;; \n\
{4} \n\
\n\
\t\t// strip off the first &apos;&&apos; \n\
\t\tif (strlen($paramString) > 0) &#123;\n\
\t\t\t$paramString = substr($paramString, 1);\n\
\t\t&#125;\n\
\t\treturn $paramString; \n\
\n\
\t&#125; \n\
\n\
\t// submits the request \n\
\tpublic function submit() &#123; \n\
\n\
{5} \n\
\n\
\t\treturn $response; \n\
\n\
\t&#125; \n\
\n\
\t// dynamic get and set thanks to the magic of __call \n\
\tprivate function __call($method, $arguments) &#123; \n\
\n\
\t\t$prefix = strtolower(substr($method, 0, 3)); \n\
\t\t$property = strtolower(substr($method, 3, 1)) . substr($method, 4); \n\
\n\
\t\tif ((empty($prefix)) || (empty($property))) &#123; \n\
\t\t\treturn; \n\
\t\t&#125; \n\
\n\
\t\t// make sure that either the $var, the private $_var, or the\n\
\t\t// protected $_Tvar exist \n\
\t\tif (!isset($this->$property)) &#123; \n\
\t\t\t$property = &apos;_&apos; . $property; \n\
\t\t&#125; \n\
\t\tif (!isset($this->$property)) &#123; \n\
\t\t\t $property = &apos;_T&apos; . substr($property, 1); \n\
\t\t&#125; \n\
\t\tif (!isset($this->$property)) &#123; \n\
\t\t\treturn; \n\
\t\t&#125; \n\
\n\
\t\t// now set or get the property \n\
\t\tif ($prefix == &quot;get&quot;) &#123; \n\
\t\t\treturn $this->$property; \n\
\t\t&#125; \n\
\t\tif ($prefix == &quot;set&quot;) &#123; \n\
\t\t\t$this->$property = $arguments[0]; \n\
\t\t\treturn $this; \n\
\t\t&#125; \n\
\n\
\t&#125; \n\
\n\
&#125;\n

# define a PHP file
defFile = &lt;?php \n\
\n\
/** \n\
&nbsp;* This file has been auto-generated by REST Compile. \n\
&nbsp;* \n\
&nbsp;* You should not modify it, unless you know what you do. Any modification \n\
&nbsp;* might cause serious damage, or even destroy your computer. \n\
&nbsp;* \n\
&nbsp;* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; \n\
&nbsp;* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \n\
&nbsp;* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \n\
&nbsp;* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE \n\
&nbsp;* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \n\
&nbsp;* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n\
&nbsp;* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \n\
&nbsp;* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \n\
&nbsp;* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \n\
&nbsp;* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \n\
&nbsp;* POSSIBILITY OF SUCH DAMAGE. \n\
&nbsp;*/ \n\
\n\
{0} \
\n\
?&gt;