# abstract rest request super class
restRequestClass = \n// class auto-generated by REST Compile \n\
abstract class RestRequest &#123; \n\
\n\
\t// provide user and password for HTTP AUTH \n\
\tprivate $_user = &apos;&apos;;\n\
\tprivate $_password = &apos;&apos;;\n\
\n\
\t// constructor \n\
\tpublic function __construct() &#123; \n\
\n\
\t&#125; \n\
\n\
\t// the POST function \n\
\tpublic function doPostCall($request, $postArgs) &#123; \n\
\n\
\t\t// initialize the session \n\
\t\t$ch = curl_init($request); \n\
\n\
\t\t// set curl options \n\
\t\tcurl_setopt ($ch, CURLOPT_POST, true); \n\
\t\tcurl_setopt ($ch, CURLOPT_POSTFIELDS, $postArgs); \n\
\t\tcurl_setopt($ch, CURLOPT_HEADER, true); \n\
\t\tcurl_setopt($ch, CURLOPT_RETURNTRANSFER, true); \n\
\t\t// provide credentials if they&apos;re established \n\
\t\tif(!empty($this-&gt;_user) && !empty($this-&gt;_password)) &#123; \n\
\t\t\tcurl_setopt($ch, CURLOPT_USERPWD, $this-&gt;_user . &apos;:&apos; . $this-&gt;_password); \n\
\t\t&#125;\n\
\n\
\t\t// do the POST and then close the session \n\
\t\t$response = curl_exec($ch); \n\
\t\t$header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE); \n\
\t\t$headers = substr($response, 0, $header_size - 4); \n\
\t\t$body = substr($response, $header_size); \n\
\t\tcurl_close($ch); \n\
\n\
\t\treturn $this-&gt;checkResponse($headers, $body); \n\
\n\
\t&#125; \n\
\n\
\t// the GET function \n\
\tpublic function doGetCall($request) &#123; \n\
\n\
\t\t// initialize the session \n\
\t\t$ch = curl_init($request); \n\
\n\
\t\t// set curl options \n\
\t\tcurl_setopt($ch, CURLOPT_HEADER, true); \n\
\t\tcurl_setopt($ch, CURLOPT_RETURNTRANSFER, true); \n\
\t\t// provide credentials if they&apos;re established \n\
\t\tif(!empty($this-&gt;_user) && !empty($this-&gt;_password)) &#123; \n\
\t\t\tcurl_setopt($ch, CURLOPT_USERPWD, $this-&gt;_user . &apos;:&apos; . $this-&gt;_password); \n\
\t\t&#125;\n\
\n\
\t\t// do the GET and then close the session \n\
\t\t$response = curl_exec($ch); \n\
\t\t$header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE); \n\
\t\t$headers = substr($response, 0, $header_size - 4); \n\
\t\t$body = substr($response, $header_size); \n\
\t\tcurl_close($ch); \n\
\n\
\t\treturn $this-&gt;checkResponse($headers, $body); \n\
\n\
\t&#125; \n\
\n\
\t// checks the status code of the response \n\
\tprivate function checkResponse($headers, $body) &#123; \n\
\n\
\t\t$status_code = array(); \n\
\t\tpreg_match(&apos;/\\\d\\\d\\\d/&apos;, $headers, $status_code); \n\
\t\tswitch($status_code[0]) &#123; \n\
\t\t\tcase 200: \n\
\t\t\t\t\tbreak; //success \n\
{0} \
\t\t&#125; \n\
\n\
\t\treturn array(&apos;body&apos; =&gt; $body, &apos;status&apos; =&gt; $status_code[0]); \n\
\n\
\t&#125; \n\
\n\
&#125; \n

dogFood = returnServiceData{1}(\n\
\t\t${1}Valid-&gt;analyzeRequest($responseValid[&apos;response&apos;], $responseValid[&apos;status&apos;]),\n\
\t\tArray(\n\
\t\t\t${1}Erroneous1-&gt;analyzeRequest($responseErroneous1[&apos;response&apos;], $responseErroneous1[&apos;status&apos;]),\n\
\t\t\t${1}Erroneous2-&gt;analyzeRequest($responseErroneous2[&apos;response&apos;], $responseErroneous2[&apos;status&apos;]),\n\
\t\t\t${1}Erroneous3-&gt;analyzeRequest($responseErroneous3[&apos;response&apos;], $responseErroneous3[&apos;status&apos;])),\n\
\t\t\t&apos;{0}&apos;);\n\
\n\
function returnServiceData{1}($validRequestData, $erroneousRequestData, $location) &#123;\n\
\t$returnXml = &quot;\n\
\t&lt;requestData location=\\&quot;&quot;.$location.&quot;\\&quot;&gt;\n\
\t&lt;validRequest status=\\&quot;&quot;.$validRequestData[&apos;status&apos;].&quot;\\&quot;&gt;\n\
\t\t&lt;schemaLocation&gt;&quot;.$validRequestData[&apos;schemaLocation&apos;].&quot;&lt;/schemaLocation&gt;\n\
\t\t&lt;defaultNamespace&gt;&quot;.$validRequestData[&apos;defaultNamespace&apos;].&quot;&lt;/defaultNamespace&gt;&quot;;\n\
\t\tforeach($validRequestData[&apos;otherNamespaces&apos;] as $namespace) &#123;\n\
\t\t\t$returnXml .= &quot;&lt;namespace&gt;&quot; . $namespace . &quot;&lt;/namespace&gt;&quot;;\n\
\t\t&#125;\n\
\t$returnXml .= &quot;\n\
\t&lt;/validRequest&gt;\n\
\t&lt;erroneousRequests&gt;&quot;;\n\
\t\tforeach($erroneousRequestData as $erroneousRequest) &#123;\n\
\t\t\t$returnXml .= &quot;\n\
\t\t\t&lt;erroneousRequest status=\\&quot;&quot;.$erroneousRequest[&apos;status&apos;].&quot;\\&quot;&gt;\n\
\t\t\t&lt;schemaLocation&gt;&quot;.$erroneousRequest[&apos;schemaLocation&apos;].&quot;&lt;/schemaLocation&gt;\n\
\t\t\t&lt;defaultNamespace&gt;&quot;.$erroneousRequest[&apos;defaultNamespace&apos;].&quot;&lt;/defaultNamespace&gt;\&quot;;\n\
\t\t\tforeach($erroneousRequest[&apos;otherNamespaces&apos;] as $namespace) &#123;\n\
\t\t\t\t$returnXml .= &quot;&lt;namespace&gt;&quot; . $namespace . &quot;&lt;/namespace&gt;&quot;;\n\
\t\t\t&#125;\n\
\t\t\t$returnXml .= &quot;\n\
\t\t\t&lt;/erroneousRequest&gt;&quot;;\n\
\t\t&#125;\n\
\t$returnXml .= &quot;\n\
\t&lt;/erroneousRequests&gt;\n\
\t&lt;/requestData&gt;&quot;;\n\
\techo $returnXml;\n\
&#125;\n

# define a class
defClass = \n// class auto-generated by REST Compile \n\
class {0} extends RestRequest &#123; \n\
\n\
\t// class variables \n\
{1} \n\
\n\
\t// constructor \n\
\tpublic function __construct({2}) &#123; \n\
\n\
\t\t// assign class variables \n\
{3} \n\
\t&#125; \n\
\n\
\t// prepares the POST or GET parameters \n\
\tprivate function prepareParams() &#123; \n\
\n\
\t\t$paramString = &apos;&apos;; \n\
{4} \n\
\n\
\t\t// strip off the first &apos;&&apos; \n\
\t\tif (strlen($paramString) > 0) &#123;\n\
\t\t\t$paramString = substr($paramString, 1);\n\
\t\t&#125;\n\
\t\treturn $paramString; \n\
\n\
\t&#125; \n\
\n\
\t// submits the request \n\
\tpublic function submit($suffix = &apos;&apos;) &#123; \n\
\n\
{5} \n\
\n\
\t\tif (strpos($response[&apos;body&apos;], &apos;<?xml&apos;) != 0) &#123; \n\
\t\t\t$response[&apos;body&apos;] = &apos;&lt;?xml version=&quot;1.0&quot; ?&gt;&lt;error /&gt;&apos;; \n\
\t\t&#125; \n\
\t\treturn array(&apos;response&apos; =&gt; $response[&apos;body&apos;], &apos;status&apos; =&gt; $response[&apos;status&apos;]); \n\
\n\
\t&#125; \n\
\n\
\t// dynamic get and set thanks to the magic of __call \n\
\tprivate function __call($method, $arguments) &#123; \n\
\n\
\t\t$prefix = strtolower(substr($method, 0, 3)); \n\
\t\t$property = strtolower(substr($method, 3, 1)) . substr($method, 4); \n\
\n\
\t\tif ((empty($prefix)) || (empty($property))) &#123; \n\
\t\t\treturn; \n\
\t\t&#125; \n\
\n\
\t\t// make sure that either the $var, the private $_var, or the\n\
\t\t// protected $_Tvar exist \n\
\t\tif (!isset($this->$property)) &#123; \n\
\t\t\t$property = &apos;_&apos; . $property; \n\
\t\t&#125; \n\
\t\tif (!isset($this->$property)) &#123; \n\
\t\t\t $property = &apos;_T&apos; . substr($property, 1); \n\
\t\t&#125; \n\
\t\tif (!isset($this->$property)) &#123; \n\
\t\t\treturn; \n\
\t\t&#125; \n\
\n\
\t\t// now set or get the property \n\
\t\tif ($prefix == &quot;get&quot;) &#123; \n\
\t\t\treturn $this->$property; \n\
\t\t&#125; \n\
\t\tif ($prefix == &quot;set&quot;) &#123; \n\
\t\t\t$this->$property = $arguments[0]; \n\
\t\t&#125; \n\
\n\
\t&#125; \n\
\n\
\tpublic function analyzeRequest($xmlString, $status = 200) &#123;\n\
\t\tif (!$xml = new SimpleXMLElement($xmlString)) &#123;\n\
\t\t\treturn Array(\n\
\t\t\t\t&apos;defaultNamespace&apos; => null,\n\
\t\t\t\t&apos;otherNamespaces&apos; => null,\n\
\t\t\t\t&apos;schemaLocation&apos; => null,\n\
\t\t\t\t&apos;status&apos; => $status);\n\
\t\t&#125;\n\
\t\t$namespaces  = $xml->getDocNamespaces(true);\n\
\t\t$defaultNamespace = $namespaces[&apos;&apos;];\n\
\t\tunset($namespaces[&apos;&apos;]);\n\
\t\tpreg_match(&quot;/xsi:schemaLocation=\\&quot;.*?\\&quot;/&quot;, $xmlString,  $matches);\n\
\t\t$schemaLocation = "";\n\
\t\tif ($matches) &#123;\n\
\t\t\t$schemaLocation = str_replace(&quot;xsi:schemaLocation=&quot;, &quot;&quot;, $matches[0]);\n\
\t\t\t$schemaLocation =\n\
\t\t\t\tstr_replace(&quot;\\&quot;&quot;, &quot;&quot;, substr($schemaLocation, strpos($schemaLocation, &quot; &quot;) + 1));\n\
\t\t&#125;\n\
\n\
\t\treturn Array(\n\
\t\t\t&apos;defaultNamespace&apos; => $defaultNamespace,\n\
\t\t\t&apos;otherNamespaces&apos; => $namespaces,\n\
\t\t\t&apos;schemaLocation&apos; => $schemaLocation,\n\
\t\t\t&apos;status&apos; => $status);\n\
\n\
\t&#125;\n\
\n\
&#125;\n

# xml header
xmlHeader = &lt;?php header (&apos;Content-type: text/xml; charset=utf-8&apos;); ?&gt;\n\
&lt;?php\necho &quot;&lt;?xml version=\\&quot;1.0\\&quot; encoding=\\&quot;utf-8\\&quot; ?&gt;\n\
&lt;serviceData xmlns=\\&quot;http://code.google.com/p/rest-api-code-gen\\&quot;&gt;&quot;;\n?&gt;\n\
{0}\n\
&lt;?php echo &quot;&lt;/serviceData&gt;&quot;; ?&gt;