# abstract rest request super class
restRequestClass = \n\
import java.io.IOException;\n\
import java.io.InputStream;\n\
import java.io.OutputStreamWriter;\n\
import java.net.HttpURLConnection;\n\
import java.net.URL;\n\
import java.util.zip.GZIPInputStream;\n\
import java.util.zip.Inflater;\n\
import java.util.zip.InflaterInputStream;\n\
\n\
/**\n\
&nbsp;* This class has been auto-generated by REST Compile.\n\
&nbsp;*\n\
&nbsp;* @author REST Compile \n\
&nbsp;*/\n\
public class RestRequest &#123;\n\
\n\
\t// provide user and password for HTTP AUTH \n\
\tprivate static final String user = &quot;&quot;; \n\
\tprivate static final String password = &quot;&quot;; \n\
\n\
\t/**\n\
\t * Class for placing a GET call\n\
\t * \n\
\t * @param urlString the URL as a String value\n\
\t * @return the response of the call as a String\n\
\t */\n\
\tpublic static String doGetCall(String urlString) &#123;\n\
\t\tString response = &quot;&quot;;\n\
\t\ttry &#123;\n\
\t\t\t// connect to the web service via HTTP GET\n\
\t\t\tURL url = new URL(urlString);\n\
\t\t\tHttpURLConnection connection =\n\
\t\t\t\t(HttpURLConnection) url.openConnection();\n\
\t\t\t// provide credentials if they&apos;re established \n\
\t\t\tif (user.length() > 0 && password.length() > 0) &#123; \n\
\t\t\t\tString userPassword = user + &quot;:&quot; + password;\n\
\t\t\t\tString encoding = \n\
\t\t\t\t\tnew sun.misc.BASE64Encoder().encode(userPassword.getBytes()); \n\
\t\t\t\tconnection.setRequestProperty ("Authorization", "Basic " + encoding); \n\
\t\t\t&#125; \n\
\t\t\tconnection.setRequestMethod(&quot;GET&quot;);\n\
\t\t\tconnection.connect();\n\
\n\
\t\t\tresponse = receiveResponse(connection);\n\
\n\
\t\t\tconnection.disconnect();\n\
\t\t&#125;\n\
\t\tcatch (IOException e) &#123;\n\
\t\t\tSystem.err.println(e.toString());\n\
\t\t&#125;\n\
\t\treturn response;\n\
\t&#125;\n\
\n\
\t/**\n\
\t * Class for placing a POST call\n\
\t * \n\
\t * @param urlString the URL as a String value \n\
\t * @param postArgs the POST arguments as a URL-encoded String \n\
\t * @return the response of the call as a String\n\
\t */\n\
\tpublic static String doPostCall(String urlString, String postArgs) &#123;\n\
\t\tString response = &quot;&quot;;\n\
\n\
\t\ttry &#123;\n\
\t\t\t// connect to the web service via HTTP POST\n\
\t\t\tURL url = new URL(urlString);\n\
\t\t\tHttpURLConnection connection =\n\
\t\t\t\t(HttpURLConnection) url.openConnection();\n\
\t\t\t// provide credentials if they&apos;re established \n\
\t\t\tif (user.length() > 0 && password.length() > 0) &#123; \n\
\t\t\t\tString userPassword = user + &quot;:&quot; + password;\n\
\t\t\t\tString encoding = \n\
\t\t\t\t\tnew sun.misc.BASE64Encoder().encode(userPassword.getBytes()); \n\
\t\t\t\tconnection.setRequestProperty ("Authorization", "Basic " + encoding); \n\
\t\t\t&#125; \n\
\t\t\tconnection.setDoOutput(true);\n\
\t\t\tconnection.setRequestMethod(&quot;POST&quot;);\n\
\t\t\tOutputStreamWriter outputStream =\n\
\t\t\t\tnew OutputStreamWriter(connection.getOutputStream());\n\
\t\t\toutputStream.write(postArgs);\n\
\t\t\toutputStream.flush();\n\
\n\
\t\t\tresponse = receiveResponse(connection);\n\
\n\
\t\t\tconnection.disconnect();\n\
\t\t\toutputStream.close();\n\
\t\t&#125;\n\
\t\tcatch (IOException e) &#123;\n\
\t\t\tSystem.err.println(e.toString());\n\
\t\t&#125;\n\
\t\treturn response;\n\
\t&#125;\n\
\t\n\
\t/**\n\
\t * Internal method for encoding-type-based input stream creation.\n\
\t * The goal is to accept compressed data if possible.\n\
\t *\n\
\t * @param connection the HTTP URL connection\n\
\t * @return the response as a String\n\
\t * @throws IOException \n\
\t */\n\
\tprivate static String receiveResponse(HttpURLConnection connection) throws IOException &#123;\n\
\t\tString response = &quot;&quot;;\n\
\t\ttry &#123;\n\
\t\t\t// create the appropriate stream wrapper based on the encoding type\n\
\t\t\tInputStream inputStream = null;\n\
\t\t\tString contentEncoding = connection.getContentEncoding();\n\
\t\t\tif (contentEncoding != null) &#123;\n\
\t\t\t\tif (contentEncoding.equalsIgnoreCase(&quot;gzip&quot;)) &#123;\n\
\t\t\t\t\tinputStream =\n\
\t\t\t\t\t\tnew GZIPInputStream(connection.getInputStream());\n\
\t\t\t\t&#125;\n\
\t\t\t\telse if (contentEncoding.equalsIgnoreCase(&quot;deflate&quot;)) &#123;\n\
\t\t\t\t\tinputStream =\n\
\t\t\t\t\t\tnew InflaterInputStream(\n\
\t\t\t\t\t\t\tconnection.getInputStream(),\n\
\t\t\t\t\t\t\tnew Inflater(true));\n\
\t\t\t\t&#125;\n\
\t\t\t&#125;\n\
\t\t\telse &#123;\n\
\t\t\t\tinputStream = connection.getInputStream();\n\
\t\t\t&#125;\n\
\n\
\t\t\t// read the contents\n\
\t\t\tbyte[] buffer = new byte[1024];\n\
\t\t\tint length;\n\
\t\t\twhile ((length = inputStream.read(buffer)) &gt; 0) &#123;\n\
\t\t\t\tfor (int i = 0; i &lt; length; i++) &#123;\n\
\t\t\t\t\tresponse += (char) buffer[i];\n\
\t\t\t\t&#125;\n\
\t\t\t&#125;\n\
\t\t\tinputStream.close();\n\
\t\t&#125;\n\
\t\tcatch (IOException e) &#123;\n\
\t\t\tint responseCode = connection.getResponseCode();\n\
\t\t\tswitch (responseCode) &#123;\n\
{0}\
\t\t\t&#125;\n\
\t\t&#125;\n\
\t\treturn response;\n\
\t&#125;\n\
&#125;\n

# define a class
defClass = \n/**\n\
&nbsp;* This class has been auto-generated by REST Compile.\n\
&nbsp;*\n\
&nbsp;* @author REST Compile \n\
&nbsp;*/\n\
\n\
import java.net.URLEncoder; \n\
import java.io.UnsupportedEncodingException; \n\
\n\
public class {0} extends RestRequest &#123;\n\
\n\
\t// class variables \n\
{2} \n\
{4}\n\
{5}\n\
\t// prepares the POST or GET parameters \n\
\tprivate String prepareParams() &#123; \n\
\t\tString paramString = &quot;&quot;; \n\
\n\
\t\ttry &#123; \n\
{1}\n\
\t\t&#125; \n\
\t\tcatch (UnsupportedEncodingException e) &#123; \n\
\t\t\tSystem.err.println(e.toString()); \n\
\t\t&#125; \n\
\n\
\t\t// strip off the first &apos;&&apos; \n\
\t\tif (paramString.length() > 0) &#123;\n\
\t\t\tparamString = paramString.substring(1);\n\
\t\t&#125;\n\
\t\treturn paramString; \n\
\n\
\t&#125; \n\
\n\
\t// submits the request \n\
\tpublic String submit() &#123; \n\
\n\
{3} \n\
\t\treturn response; \n\
\n\
\t&#125; \n\
\n\
&#125;\n

# a constructor
defConstructor = \n\t/**\n\
\t&nbsp;* constructor with {4} argument(s)\n\
\t&nbsp;* \n\
{3}\
\t&nbsp;*/ \n\
\tpublic {0}({1}) &#123; \n\
\n\
{2} \n\
\t&#125; \n\

# define a Java file
defFile = /** \n\
&nbsp;* This file has been auto-generated by REST Compile. \n\
&nbsp;* \n\
&nbsp;* You should not modify it, unless you know what you do. Any modification \n\
&nbsp;* might cause serious damage, or even destroy your computer. \n\
&nbsp;* \n\
&nbsp;* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; \n\
&nbsp;* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \n\
&nbsp;* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \n\
&nbsp;* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE \n\
&nbsp;* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \n\
&nbsp;* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n\
&nbsp;* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \n\
&nbsp;* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \n\
&nbsp;* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \n\
&nbsp;* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \n\
&nbsp;* POSSIBILITY OF SUCH DAMAGE. \n\
&nbsp;*/ \n\
\n\
package {1};\n\
{0} \
\n\