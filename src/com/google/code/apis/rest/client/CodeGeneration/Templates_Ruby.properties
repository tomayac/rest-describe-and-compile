# abstract rest request super class
restRequestClass = \n# class auto-generated by REST Compile\n\
class RestRequest\n\
\n\
\tdef initialize()\n\
\t\t# provide user and password for HTTP AUTH\n\
\t\t@user = &apos;&apos;\n\
\t\t@password = &apos;&apos;\n\
\tend\n\
\n\
\t# HTTP(S) related functions\n\
\trequire &apos;net/https&apos;\n\
\n\
\t# the GET function\n\
\tdef do_get_call(uri_string)\n\
\n\
\t\t# the uri must be passed as an URI object\n\
\t\turi = URI.parse(uri_string)\n\
\t\thttp = Net::HTTP.new(uri.host, uri.port)\n\
\t\tif uri.port == 443:\n\
\t\t\thttp.use_ssl = true\n\
\t\tend\n\
\t\thttp.start do |http|\n\
\t\t\trequest = Net::HTTP::Get.new(uri.path + &quot;?&quot; + uri.query)\n\
\t\t\tif @user and @password:\n\
\t\t\t\trequest.basic_auth @user, @password\n\
\t\t\tend\n\
\t\t\tresponse = http.request(request)\n\
\t\t\t# check the HTTP status code of the response\n\
\t\t\tself.check_response(response.code)\n\
\t\t\t# return only the XML part of the response\n\
\t\t\tresponse.body\n\
\t\tend\n\
\n\
\tend\n\
\n\
\t# the POST function\n\
\tdef do_post_call(uri_string, post_args)\n\
\n\
\t\tpost_args = post_args.split(&quot;&&quot;)\n\
\t\thash = &#123;&#125;\n\
\t\tpost_args.each &#123;|post_arg|\n\
\t\t\tpost_arg = post_arg.split(&quot;=&quot;)\n\
\t\t\thash[post_arg[0]] = post_arg[1]\n\
\t\t&#125;\n\
\t\t# the uri must be passed as an URI object\n\
\t\turi = URI.parse(uri_string)\n\
\t\thttp = Net::HTTP.new(uri.host, uri.port)\n\
\t\tif uri.port == 443:\n\
\t\t\thttp.use_ssl = true\n\
\t\tend\n\
\t\thttp.start do |http|\n\
\t\t\trequest = Net::HTTP::Post.new(uri.path)\n\
\t\t\tif @user and @password:\n\
\t\t\t\trequest.basic_auth @user, @password\n\
\t\t\tend\n\
\t\t\trequest.set_form_data(hash)\n\
\t\t\tresponse = http.request(request)\n\
\t\t\t# check the HTTP status code of the response\n\
\t\t\tself.check_response(response.code)\n\
\t\t\t# return only the XML part of the response\n\
\t\t\tresponse.body\n\
\t\tend\n\
\n\
\tend\n\
\n\
\t# checks the status code of the response\n\
\tdef check_response(status_code)\n\
\n\
\t\tcase status_code\n\
\t\twhen "200"\n\
\t\t\treturn\n\
\t\t\t# success\n\
{0}\
\t\tend\n\
\n\
\tend\n\
\n\
end\n

# define a Ruby file
defFile = # This file has been auto-generated by REST Compile. \n\
# \n\
# You should not modify it, unless you know what you do. Any modification \n\
# might cause serious damage, or even destroy your computer. \n\
# \n\
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; \n\
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \n\
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \n\
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE \n\
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \n\
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n\
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \n\
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \n\
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \n\
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \n\
# POSSIBILITY OF SUCH DAMAGE. \n\
# \n\
{0}\n

# define a class
defClass = \n# class auto-generated by REST Compile \n\
class {0} &lt; RestRequest \n\
\n\
\t# getter and setter methods \n\
\tattr_accessor {5} \n\
\n\
\t# constructor \n\
\tdef initialize({1}) \n\
\t\t# initialize the super class\n\
\t\tsuper()\n\
\t\t# assign class variables \n\
{2} \
\n\
\tend \n\
\n\
\t# prepares the POST or GET parameters \n\
\tdef prepare_params() \n\
\n\
\t\tparam_string = &quot;&quot; \n\
{3} \n\
\n\
\t\t# strip off the first &apos;&&apos; \n\
\t\tif param_string.length > 0 \n\
\t\t\tparam_string = param_string[1, param_string.length - 1] \n\
\t\tend \n\
\t\tparam_string \n\
\n\
\tend \n\
\n\
\t# submits the request \n\
\tdef submit() \n\
\n\
{4} \n\
\n\
\tend \n\
\n\
end\n